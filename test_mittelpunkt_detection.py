#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec 23 13:39:03 2021

@author: testbenutzer
"""

import numpy as np
import matplotlib.pyplot as plt



def fit_lines(x, y, xm, ym, max_lines, redo=3, max_loop=20):
    try:
        m = (y-ym)/(x-xm)
        m = np.round(np.reshape(m, (m.shape[0], 1)),2)
        bin_borders = None
        arr = None
        redo = 3
        must_return = True
        
        for i in range(1,max_loop+1):
            arr, bin_borders = np.histogram(m, bins=i)
            bin_borders = np.round(bin_borders,2)
            lines = len(np.nonzero(arr)[0])
            
            if lines >= max_lines:
                for l in range(i+1,i+redo+1):
                    arr, bin_borders = np.histogram(m, bins = l)
                must_return = False
                break
            
        if must_return:
            return np.nan, np.nan
        
        m_fit = []
        m_stddev = 0
        
        for i in np.where(arr > 1)[0]:
            result = np.where(np.logical_and(m >= bin_borders[i], m<= bin_borders[i+1]))[0]
            
            x_y = np.zeros((result.shape[0],2))
            m_ausschnitt = np.zeros((result.shape[0],1))
            j = 0
            for k in result:
                x_y[j,:] = points[k,:]
                m_ausschnitt[j] = m[k]
                j = j + 1
            m_stddev = m_stddev + round(np.std(m_ausschnitt),4)
            m_fit.append(round(np.polyfit(x_y[:,0],x_y[:,1],1)[0],2))
        
        return m_stddev, m_fit
    except:
        return np.nan, np.nan

#mitte = (7, 2)

#points_list = [(5, 4),(6, 3),(5, 1),(4, 0.1),(9, 3),(10, 4),(8, 1),(11, -2),(6.7, -1),(7.2, 4),(7.4, 6),(7.5, 7),(6.6, -2),(2, 7),(12, 5)]
#mD = [(725.0, 631.5), (288.0, 620.0), (415.0, 616.5), (331.5, 597.5), (774.5, 595.0), (361.5, 580.5), (236.5, 569.0), (553.5, 561.0), (421.5, 565.5), (171.0, 534.0), (707.5, 532.0), (431.5, 530.5), (342.0, 534.0), (284.0, 523.5), (538.0, 506.5), (437.5, 508.5), (765.0, 496.5), (668.5, 494.5), (723.5, 472.5), (643.0, 470.0), (337.0, 471.5), (446.5, 475.0), (813.5, 467.5), (534.5, 468.0), (276.5, 463.5), (626.5, 453.0), (523.5, 450.0), (452.5, 446.5), (367.0, 441.0), (744.5, 436.5), (517.0, 433.0), (76.0, 431.5), (601.5, 429.0), (718.5, 425.0), (906.0, 421.0), (458.5, 424.5), (385.5, 421.5), (166.5, 406.0), (828.5, 399.5), (566.5, 396.0), (507.0, 396.5), (624.5, 392.0), (366.0, 392.0), (228.0, 388.5), (759.0, 384.5), (466.5, 391.5), (693.0, 368.5), (415.0, 387.5), (542.0, 373.0), (652.0, 358.5), (305.0, 368.5), (627.5, 352.0), (363.5, 351.0), (605.5, 348.0), (573.0, 339.0), (848.0, 335.5), (403.0, 340.0), (742.5, 330.5), (540.0, 324.5), (209.5, 299.5), (407.5, 297.0), (565.5, 294.5), (72.0, 292.0), (598.5, 283.5), (638.5, 272.5), (343.5, 276.0), (291.0, 266.0), (429.5, 261.5), (683.5, 259.5), (226.0, 250.0), (737.0, 244.5), (504.0, 244.5), (551.5, 249.0), (789.0, 228.0), (458.5, 224.5), (97.0, 218.0), (583.0, 215.5), (882.5, 200.0), (600.5, 199.0), (238.0, 196.5), (449.5, 192.5), (363.5, 197.5), (444.5, 173.0), (768.5, 172.5), (623.0, 173.0), (329.5, 165.0), (702.5, 164.0), (525.5, 151.5), (436.5, 144.5), (105.5, 140.0), (664.5, 129.5), (289.0, 123.0), (771.5, 114.0), (540.0, 110.5), (423.5, 102.5), (260.5, 97.0), (624.0, 98.5), (698.0, 89.5), (242.0, 82.5), (362.5, 73.5), (310.5, 65.5), (548.5, 56.0), (657.5, 45.5), (748.0, 40.5), (699.0, 32.0), (402.0, 28.0), (281.0, 24.5), (205.5, 21.5)]
points_list = [(725.0, 631.5), (288.0, 620.0), (415.0, 616.5), (331.5, 597.5), (774.5, 595.0), (361.5, 580.5), (236.5, 569.0), (553.5, 561.0), (421.5, 565.5), (171.0, 534.0), (707.5, 532.0), (431.5, 530.5), (342.0, 534.0), (284.0, 523.5), (538.0, 506.5), (437.5, 508.5), (765.0, 496.5), (668.5, 494.5), (723.5, 472.5), (643.0, 470.0), (337.0, 471.5), (446.5, 475.0), (813.5, 467.5), (534.5, 468.0), (276.5, 463.5), (626.5, 453.0), (523.5, 450.0), (452.5, 446.5), (367.0, 441.0), (744.5, 436.5), (517.0, 433.0), (76.0, 431.5), (601.5, 429.0), (718.5, 425.0), (906.0, 421.0), (458.5, 424.5), (385.5, 421.5), (166.5, 406.0), (828.5, 399.5), (566.5, 396.0), (507.0, 396.5), (624.5, 392.0), (366.0, 392.0), (228.0, 388.5), (759.0, 384.5), (466.5, 391.5), (693.0, 368.5), (415.0, 387.5), (542.0, 373.0), (652.0, 358.5), (305.0, 368.5), (627.5, 352.0), (363.5, 351.0), (605.5, 348.0), (573.0, 339.0), (848.0, 335.5), (403.0, 340.0), (742.5, 330.5), (540.0, 324.5), (209.5, 299.5), (407.5, 297.0), (565.5, 294.5), (72.0, 292.0), (598.5, 283.5), (638.5, 272.5), (343.5, 276.0), (291.0, 266.0), (429.5, 261.5), (683.5, 259.5), (226.0, 250.0), (737.0, 244.5), (504.0, 244.5), (551.5, 249.0), (789.0, 228.0), (458.5, 224.5), (97.0, 218.0), (583.0, 215.5), (882.5, 200.0), (600.5, 199.0), (238.0, 196.5), (449.5, 192.5), (363.5, 197.5), (444.5, 173.0), (768.5, 172.5), (623.0, 173.0), (329.5, 165.0), (702.5, 164.0), (525.5, 151.5), (436.5, 144.5), (105.5, 140.0), (664.5, 129.5), (289.0, 123.0), (771.5, 114.0), (540.0, 110.5), (423.5, 102.5), (260.5, 97.0), (624.0, 98.5), (698.0, 89.5), (242.0, 82.5), (362.5, 73.5), (310.5, 65.5), (548.5, 56.0), (657.5, 45.5), (748.0, 40.5), (699.0, 32.0), (402.0, 28.0), (281.0, 24.5), (205.5, 21.5)]

points = np.array(points_list)
x = points[:,0]
y = points[:,1]
stepsize = 0.5
off = 20
x_range = (975/2-off,975/2+off)
y_range = (643/2-off,643/2+off)
max_lines_def = 6

list_m_stddev = []
list_m_fit = []


for xm in np.arange(x_range[0],x_range[1]+stepsize, stepsize):
    for ym in np.arange(y_range[0], y_range[1]+stepsize, stepsize):
        m_stddev, m_fit = fit_lines(x, y, xm, ym, max_lines_def)
        list_m_stddev.append(m_stddev)
        list_m_fit.append(m_fit)
        

array_m_stddev = np.reshape(np.array(list_m_stddev), (1,len(list_m_stddev)))
index_best_m_fit = np.where(list_m_stddev == np.nanmin(array_m_stddev))[0][0]
best_m_fit = list_m_fit[index_best_m_fit]
position = (index_best_m_fit//((y_range[1]-y_range[0])//stepsize), index_best_m_fit%((y_range[1]-y_range[0])//stepsize))
center = (x_range[0]+(position[0]-1)*stepsize, y_range[0]+(position[1]-1)*stepsize)



"""
Darstellung
"""
width = np.max([[int((np.max(y)-np.min(y))/2), int((np.max(x)-np.min(x))/2)]])

plt.plot(points[:,0], points[:,1], 'ro')
for m1 in best_m_fit[:max_lines_def]:
    plt.plot([center[0]-width, center[0]+width], [center[1]-width*m1, center[1]+width*m1],color="green")
plt.ylim([np.min(y)-1,np.max(y)+1])
plt.xlim([np.min(x)-1,np.max(x)+1])





















